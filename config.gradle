android {
    compileSdkVersion libs.versions.compile.sdk.version.get() as Integer
    buildToolsVersion libs.versions.build.tools.version.get()

    defaultConfig {
        applicationId "com.wonder.wonderland"
        minSdkVersion libs.versions.min.sdk.version.get() as Integer
        targetSdkVersion libs.versions.target.sdk.version.get() as Integer

        vectorDrawables {
            useSupportLibrary true
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments["runnerBuilder"] = "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.compiler.get()
    }

    buildFeatures {
        viewBinding = true
        compose true
    }

    kapt {
        correctErrorTypes = true
        useBuildCache = true
    }

    signingConfigs {
        debug {
            storeFile file(project.rootProject.file(DEBUG_KEY_PATH))
            storePassword KEYSTORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword KEY_ALIAS_PASSWORD
        }
        release {
            storeFile file(project.rootProject.file(RELEASE_KEY_PATH))
            storePassword KEYSTORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword KEY_ALIAS_PASSWORD
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles(file("${rootProject.rootDir.absolutePath}/proguard-rules.pro"))
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles(file("${rootProject.rootDir.absolutePath}/proguard-rules.pro"))
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        dev {
            flavorDimensions DEBUG_DIMENSION_NAME
            applicationIdSuffix DEBUG_SUFFIX_NAME
            versionCode libs.versions.version.code.debug.get() as Integer
            versionName libs.versions.version.name.debug.get()
            manifestPlaceholders = [
                kakaoNativeAppKey: KAKAO_NATIVE_APP_KEY
            ]
            proguardFiles(file("${rootProject.rootDir.absolutePath}/proguard-rules.pro"))
        }
        prod {
            flavorDimensions RELEASE_DIMENSION_NAME
            versionCode libs.versions.version.code.release.get() as Integer
            versionName libs.versions.version.name.release.get()
            manifestPlaceholders = [
                kakaoNativeAppKey: KAKAO_NATIVE_APP_KEY
            ]
            proguardFiles(file("${rootProject.rootDir.absolutePath}/proguard-rules.pro"))
        }
    }

    android.variantFilter { variant ->
        def buildName = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name

        if (flavorName == 'dev' && buildName == 'release'
                || flavorName == 'prod' && buildName == 'debug') {
            variant.setIgnore(true)
        }
    }
}
