android {
    compileSdkVersion BuildBaseConfig.COMPILE_VERSION
    buildToolsVersion BuildBaseConfig.BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId BuildBaseConfig.APPLICATION_ID
        minSdkVersion BuildBaseConfig.MIN_SDK_VERSION
        targetSdkVersion BuildBaseConfig.TARGET_SDK_VERSION

        vectorDrawables {
            useSupportLibrary true
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments["runnerBuilder"] = "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    composeOptions {
        kotlinCompilerExtensionVersion ComposeConfig.composeCompilerVersion
    }

    buildFeatures {
        viewBinding = true
        compose true
    }

    kapt {
        correctErrorTypes = true
        useBuildCache = true
    }

    signingConfigs {
        debug {
            storeFile file(project.rootProject.file("keystore/wonder_debug.jks"))
            storePassword KEYSTORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword KEY_ALIAS_PASSWORD
        }
        release {
            storeFile file(project.rootProject.file("keystore/wonder_release.jks"))
            storePassword KEYSTORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword KEY_ALIAS_PASSWORD
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled BuildTypeDebug.minifyEnabled
            shrinkResources false
            proguardFiles(file("${rootProject.rootDir.absolutePath}/proguard-rules.pro"))
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled BuildTypeRelease.minifyEnabled
            shrinkResources true
            proguardFiles(file("${rootProject.rootDir.absolutePath}/proguard-rules.pro"))
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        dev {
            flavorDimensions BuildTypeDebug.dimensionsName
            applicationIdSuffix BuildTypeDebug.suffixName
            versionCode BuildTypeDebug.versionCode
            versionName BuildTypeDebug.versionName
            manifestPlaceholders = [
                    appName     : BuildTypeDebug.appName,
                    kakaoNativeAppKey: BuildBaseConfig.KAKAO_NATIVE_APP_KEY
            ]
            proguardFiles(file("${rootProject.rootDir.absolutePath}/proguard-rules.pro"))
        }
        prod {
            flavorDimensions BuildTypeRelease.dimensionsName
            versionCode BuildTypeRelease.versionCode
            versionName BuildTypeRelease.versionName
            manifestPlaceholders = [
                    appName     : BuildTypeRelease.appName,
                    kakaoNativeAppKey: BuildBaseConfig.KAKAO_NATIVE_APP_KEY
            ]
            proguardFiles(file("${rootProject.rootDir.absolutePath}/proguard-rules.pro"))
        }
    }

    android.variantFilter { variant ->
        def buildName = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name

        if (flavorName == 'dev' && buildName == 'release'
                || flavorName == 'prod' && buildName == 'debug') {
            variant.setIgnore(true)
        }
    }
}
